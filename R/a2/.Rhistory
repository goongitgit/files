library("tidyverse")
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv")
View(national)
# 1.c Load the *state level* data into a variable. `states`
states <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")
View(states)
# 1.d Load the *county level* data into a variable. `counties`
#     NOTE: This is a large dataset. It may take 30-60 seconds to load.
counties <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
View(counties)
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
obs_states <- nrow(states)
obs_counties <- nrow(counties)
# 1.f How many features (columns) are there in each dataset?
# Create `num_features_national`, `num_features_states`, `num_features_counties`
num_features_national <- ncol(national)
num_features_states <- ncol(states)
num_features_counties <- ncol(counties)
# R1.a REFLECTION: Use View() to open the three datasets and explore
#      the data, and with documentation form the New York Times, answer
#      these questions:
#        (a) How does the County-level data differ from the
#            the State-level and U.S. National-level?
#        (b) What is the same about these three datasets?
#        (c) What does the feature "fips" mean? Do a Google search and/or
#            visit: https://www.census.gov/library/reference/code-lists/ansi.html
# 2 Exploratory Analysis ----------------------------------------------------
# Use functions from the DPLYR package to explore the datasets by answering
# the following questions. Note, you must return the specific column being
# asked about. You do this with the pull() function. For example:
#
#       What is the earliest date in the National-level dataset? `earliest_date`
#       This code is CORRECT because pull() is used to return a single value:
#       earliest_date <- national %>%
#           filter(date == min(date)) %>%
#           pull(date)
#
#       This is NOT correct because an entire row is returned
#       earliest_date <- national %>%
#          filter(date == min(date))
# SUGGESTION: Un-comment the code and try out these two dpyler expressions.
#             Examine the data that is being returned.
# NOTE: Unless otherwise stated, use DPLYR functions to solve all coding
#       tasks.
# 2.a How many total cases have there been in the U.S. by the most recent date
# in the dataset? `total_us_cases`
total_us_cases <- pull(filter(national, date == max(date)), cases)
# 2.b How many total deaths have there been in the U.S. by the most recent date
# in the dataset? `total_us_deaths`
total_us_deaths <- pull(filter(national, date == max(date)), deaths)
# 2.c Which state has had the highest number of cases?
# `state_highest_cases`
state_highest_cases <- pull(filter(states, cases == max(cases)), state)
# 2.d What is the highest number of cases in a state?
# `num_highest_state`
state_highest_cases <- pull(filter(states, cases == max(cases)), cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases),
# as of the most recent date? HINT: You may need to create a new column in
# order to do this. `state_highest_ratio`
states <- mutate(states, ratio = deaths/cases)
state_highest_ratio <- pull(filter(filter(states, date == max(date)), ratio == max(ratio)), state)
# 2.f Which state has had the fewest number of cases *as of the most
# recent date*? HINT: This is a little trickier to calculate than the
# maximum because of the meaning of the row. `state_lowest_cases`
state_lowest_cases <- pull(filter(filter(states, date == max(date)), cases == min(cases)), state)
# R2.a REFLECTION: (a) What did you learn about the dataset when you calculated
#      the state with the lowest cases; and (b) What does that tell you about
#      testing your assumptions in a dataset?
#      REMINDER: Please answer in the README.md.
# 2.g Which county has had the highest number of cases?
# `county_highest_cases`
county_highest_cases <- pull(filter(counties, cases == max(cases)), county)
# 2.h What is the highest number of cases that have happened in a single county?
# `num_highest_cases_county`
num_highest_cases_county <- pull(filter(counties, cases == max(cases)), cases)
# 2.i Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together,
# in this form: "COUNTY, STATE". Therefore, add a new column to your `counties`
# data frame called `location` that stores the county and state (separated by
# a comma and space). You can do this in at least two ways:
#   (1) `mutate()`   and the `paste0()` string function; or
#   (2) `unite()`  - see https://tidyr.tidyverse.org/reference/unite.html
#       (Note: Be sure to keep the original columns.
#              To do so, use the parameter `remove=FALSE`.)
counties <- mutate(counties, location = paste0(county, ", ", state))
# 2.j What is the name of the location (county, state) with the highest number
# of deaths? `location_most_deaths`
location_most_deaths <- pull(filter(counties, deaths == max(deaths, na.rm = TRUE)))
# R2.b REFLECTION: Is the location with the highest number of cases the
#      location with the most deaths? If not, why do you believe that may be
#      the case?
# NOTE: As you have seen, the three datasets are "cumulative sums," that is, running
# totals of the number of cases and deaths. On each day the cases and deaths counts
# either stay the same or increase. They should never decrease. It is often very
# helpful to know by how much the numbers have increased (if at all) between
# successive times.
# 2.k Add a new column to your `national` data frame called `new_cases`; that is,
# the number new cases each day.
# HINTS:
#    (1) Recall that the dyplr mutate() function is used to add new columns.
#    (2) The dyplr lag() function will be very helpful. Search "R dplyr lag()"
#        on Google and look for a good link.
national <- mutate(national, new_cases = cases - lag(cases))
# 2.l Similarly, the `deaths` columns *is not* the number of new deaths per day.
# Add  a new column to the `national` data frame called `new_deaths`
# that has the number of *new* deaths each day
national <- mutate(national, new_deaths = deaths - lag(deaths))
# 2.m What was the date when the most new cases occurred?
# `date_most_cases`
date_most_cases <- national %>%
drop_na() %>%
filter(new_cases == max(new_cases)) %>%
pull(date)
# 2.n What was the date when the most new deaths occurred?
# `date_most_deaths`
date_most_deaths <- national %>%
drop_na() %>%
filter(new_deaths == max(new_deaths)) %>%
pull(date)
# 2.o How many people died on the date when the most deaths occurred? `most_deaths`
most_deaths <- national %>%
drop_na() %>%
filter(deaths == max(deaths)) %>%
pull(new_deaths)
# 2.p Create a (very basic) plot by passing `national$new_cases` column to the
# `plot()` function. Store the result in a variable `new_cases_plot`.
new_cases_plot <- plot(national$new_cases)
# 2.q Create a (very basic) plot by passing the `new_deaths` column to the
# `plot()` function. Store the result in a variable `new_deaths_plot`.
new_deaths_plot <- plot(national$new_deaths)
# INTERLUDE -  Have fun! - No specific points.
#
# The plots you just created are rudimentary. As you have seen,
# the charts in the New York Times are more refined. See:
# https://www.nytimes.com/interactive/2021/us/covid-cases.html
#
# We have developed a chart that demonstrates that you too will
# soon be able to create insightful and beautiful charts.
#
# Run this code several times, changing the window size.
# Suggestions for window sizes: 1, 3, 7, 20, 50, 200. You
# should see the charts in the RStudio "Plots" tab.
library("Rcpp")
window_size <- 7
national <- moving_avg_counts(national, window_size)
# 2.p Create a (very basic) plot by passing `national$new_cases` column to the
# `plot()` function. Store the result in a variable `new_cases_plot`.
new_cases_plot <- plot(national$new_cases)
# 2.q Create a (very basic) plot by passing the `new_deaths` column to the
# `plot()` function. Store the result in a variable `new_deaths_plot`.
new_deaths_plot <- plot(national$new_deaths)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
summarize(
cases == max(cases)
)
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
summarize(
cases == max(cases),
location = location
) %>%
filter(cases == TRUE)
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
summarize(
cases == max(cases),
location = location
) %>%
filter(cases = TRUE)
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
summarize(
cases = max(cases),
location = location
) %>%
filter(cases = TRUE)
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
summarize(
cases = max(cases)==TRUE,
location = location
) %>%
filter(cases = TRUE)
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
summarize(
cases = filter(counties, cases == max(cases))
) %>%
View(highest_in_each_state)
# national_total_cases: The case counts in the `national` data frame
# state_total_cases:    The sum of all case counts in the `states` data frame
# county_total_cases:   The sum of all case counts in the `counties` data frame
#
# We now guide you through the steps for this consistency check. We've typed the
# variable names to save you a little bit of work.
#
# 4.a Create a `county_by_day` data frame with columns:
#     `date` and `county_total_cases`. HINT: To summarize
#      the case counts, how do you need to group the data?
county_by_day <- NULL
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
summarize(
cases = filter(counties, cases == max(cases))
) %>%
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
summarize(
cases = filter(counties, cases == max(cases))
)
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm=TRUE))
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date, na.rm=TRUE))
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date, na.rm=TRUE)) %>%
filter(cases == max(cases, na.rm = TRUE))
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date, na.rm=TRUE)) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
select(location)
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date, na.rm=TRUE)) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
select(location, -state)
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date, na.rm=TRUE)) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
ungroup() %>%
select(location)
View(highest_in_each_state)
rm(highest_cases)
rm(highest_in_each_state)
highest_cases <- counties %>%
group_by(location) %>%
filter(date == max(date)) %>%
summarize(cases = n()) %>%
filter(cases == max(cases)) %>%
pull(location)
highest_in_each_state <- c(highest_cases)
View(highest_in_each_state)
print(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
#highest_in_each_state <- counties %>%
#                       group_by(state) %>%
##                     filter(cases == max(cases, na.rm = TRUE)) %>%
#                    ungroup() %>%
#                   select(location)
highest_in_each_state <- counties %>%
group_by(location) %>%
filter(date == max(date)) %>%
summarize(cases = n()) %>%
filter(cases == max(cases)) %>%
select(location)
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
#highest_in_each_state <- counties %>%
#                       group_by(state) %>%
##                     filter(cases == max(cases, na.rm = TRUE)) %>%
#                    ungroup() %>%
#                   select(location)
highest_in_each_state <- counties %>%
group_by(location) %>%
filter(date == max(date)) %>%
summarize(cases = n()) %>%
filter(cases == max(cases)) %>%
select(location)
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date, na.rm=TRUE)) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
ungroup() %>%
select(location)
View(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date, na.rm=TRUE)) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
ungroup() %>%
select(location)
View(highest_in_each_state)
# 3.c What is the county with the *current* (e.g., on the most recent date)
# lowest number of deaths in each state? Your answer, stored in
# `lowest_in_each_state`, should be a *vector* of
# `location` names (the column with COUNTY, STATE).
lowest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == min(date, na.rm=TRUE)) %>%
filter(cases == min(cases, na.rm = TRUE)) %>%
ungroup() %>%
select(location)
View(highest_in_each_state)
# 3.c What is the county with the *current* (e.g., on the most recent date)
# lowest number of deaths in each state? Your answer, stored in
# `lowest_in_each_state`, should be a *vector* of
# `location` names (the column with COUNTY, STATE).
lowest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == min(date, na.rm=TRUE)) %>%
filter(cases == min(cases, na.rm = TRUE)) %>%
ungroup() %>%
select(location)
View(lowest_in_each_state)
# 3.b Using the variable `highest_in_each_state`, which location (COUNTY, STATE) has had
# the highest number of cases in Washington? `highest_in_wa`
# Hint: Use the function str_detect() from the stringr() package.
highest_in_wa <- highest_in_each_state %>%
filter(str_detect("Washington") == TRUE)
# 3.b Using the variable `highest_in_each_state`, which location (COUNTY, STATE) has had
# the highest number of cases in Washington? `highest_in_wa`
# Hint: Use the function str_detect() from the stringr() package.
highest_in_wa <- highest_in_each_state %>%
filter(str_detect(Washington) == TRUE)
# 3.c What is the county with the *current* (e.g., on the most recent date)
# lowest number of deaths in each state? Your answer, stored in
# `lowest_in_each_state`, should be a *vector* of
# `location` names (the column with COUNTY, STATE).
lowest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date, na.rm=TRUE)) %>%
filter(cases == min(cases, na.rm = TRUE)) %>%
ungroup() %>%
select(location)
View(lowest_in_each_state)
# 3.b Using the variable `highest_in_each_state`, which location (COUNTY, STATE) has had
# the highest number of cases in Washington? `highest_in_wa`
# Hint: Use the function str_detect() from the stringr() package.
highest_in_wa <- highest_in_each_state %>%
filter(str_detect(highest_in_each_state, "Washington") == TRUE)
#pull(location())
print(highest_in_wa)
# 3.b Using the variable `highest_in_each_state`, which location (COUNTY, STATE) has had
# the highest number of cases in Washington? `highest_in_wa`
# Hint: Use the function str_detect() from the stringr() package.
library(stringr)
highest_in_wa <- highest_in_each_state %>%
filter(str_detect(highest_in_each_state, "Washington") == TRUE)
highest_in_wa <- highest_in_each_state %>%
filter(str_detect(highest_in_each_state, "Washington") == TRUE)
#pull(location())
print(highest_in_wa)
highest_in_wa <- highest_in_each_state %>%
filter(str_detect("Washington") == TRUE)
highest_in_wa <- filter(highest_in_each_state,str_detect("Washington") == TRUE)
highest_in_wa <- filter(highest_in_each_state,str_detect(highest_in_each_state, "Washington") == TRUE)
str_detect(highest_in_each_state, "Washington")
highest_in_wa <- highest_in_each_state %>%
select(location) %>%
filter(str_detect(highest_in_each_state, "Washington"))
is.vector(highest_in_wa)
typeof(highest_in_wa)
# 3.b Using the variable `highest_in_each_state`, which location (COUNTY, STATE) has had
# the highest number of cases in Washington? `highest_in_wa`
# Hint: Use the function str_detect() from the stringr() package.
install.packages(stringi)
# 3.b Using the variable `highest_in_each_state`, which location (COUNTY, STATE) has had
# the highest number of cases in Washington? `highest_in_wa`
# Hint: Use the function str_detect() from the stringr() package.
install.packages("stringi")
install.packages(stringr)
install.packages("stringr")
library(stringr)
locations <- highest_in_each_state %>%
select(location)
library("tidyverse")
library("dplyr")
library(stringr)
locations <- highest_in_each_state %>%
select(location)
highest_in_wa <- locations %>%
filter(str_detect(locations, "Washington"))
#pull(location())
print(highest_in_wa)
locations <- highest_in_each_state %>%
ungroup() %>%
select(location)
highest_in_wa <- locations %>%
filter(str_detect(locations, "Washington"))
#pull(location())
print(highest_in_wa)
locations <- highest_in_each_state %>%
pull(location)
highest_in_wa <- locations %>%
filter(str_detect(locations, "Washington"))
print(highest_in_each_state)
# 3.a What is the county with the *current* highest number of cases in each state?
# *Current* means the the most recent date. Your answer, stored in
# `highest_in_each_state`, should be a *vector* of  `location` names, that is,
# the column with COUNTY, STATE.  HINT: Be careful about the order of filtering
# your data.
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date, na.rm=TRUE)) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(location)
View(highest_in_each_state)
locations <- highest_in_each_state %>%
filter(str_detect(highest_in_each_state, "Washington"))
locations <- highest_in_each_state %>%
filter(str_detect(highest_in_each_state, "Washington") == TRUE)
#pull(location())
print(highest_in_wa)
